package main

import (
	"bytes"
	"github.com/stretchr/testify/assert"
	"net"
	"testing"
)

func TestEmptyMsg(t *testing.T) {
	b := bytes.Buffer{}
	NSDPDefaultMsg.WriteToBuffer(&b)

	empty := []byte{
		0x01,
		0x01,
		0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00,
		0x00, 0x01,
		0x4E, 0x53, 0x44, 0x50,
		0x00, 0x00, 0x00, 0x00,
		0xff, 0xff, 0x00, 0x00,
		//		0x00, 0x00, 0xff, 0xff,
	}

	assert.Equal(t, empty, b.Bytes())
}

func TestMsgParse(t *testing.T) {

	input := []byte{
		1,
		2,
		0, 0,
		0, 0, 0, 0,
		17, 17, 17, 17, 17, 17,
		68, 165, 110, 17, 17, 17,
		0, 0,
		211, 43,
		78, 83, 68, 80,
		0, 0, 0, 0,
		0, 1, 0, 6, 71, 83, 51, 48, 56, 69,
		255, 255, 0, 0,
	}
	expected := &NSDPMsg{
		NSDPHeader: NSDPHeader{Version: 1, Op: 2, Result: 0, Unknown1: [4]uint8{0x0, 0x0, 0x0, 0x0},
			HostMac: net.HardwareAddr{0x11, 0x11, 0x11, 0x11, 0x11, 0x11}, DeviceMac: net.HardwareAddr{0x44, 0xa5, 0x6e, 0x11, 0x11, 0x11},
			Unknown2: [2]uint8{0x0, 0x0}, Seq: 0xd32b, Signature: [4]uint8{0x4e, 0x53, 0x44, 0x50}, Unknown3: [4]uint8{0x0, 0x0, 0x0, 0x0}},
		NSDPBody:   NSDPBody{Body: []NSDPTLV{NSDPTLV{Tag: 1, Length: 6, Value: []uint8{0x47, 0x53, 0x33, 0x30, 0x38, 0x45}}}},
		NSDPMarker: NSDPMarker{EndOfData: [4]uint8{0xff, 0xff, 0x0, 0x0}},
	}

	msg := ParseNSDPMsg(input)

	assert.Equal(t, expected, msg)
}
